#
# Analyze.java
#
defaultInputLabels = a,b,c,d,e,f,g,h
defaultOutputLabels = x,y,z,u,v,w,s,t
#
# AnalyzeException.java
#
analyzeCircularError = Referência circular detectada; tabela-verdade será calculada em seu lugar.
analyzeConflictError = Saídas conflitantes detectadas; tabela-verdade será calculada em seu lugar.
analyzeCannotHandleError = Calcular a tabela-verdade no lugar da expressão devido a %s.
#
# circuit/Circuit.java
#
circuitName = Nome do circuito
circuitLabelDirAttr = Direção do rótulo
#
# circuit/CircuitMutation.java
#
unknownChangeAction = Mudar circuito
#
# circuit/Subcircuit.java
#
subcircuitViewItem = Ver %s
subcircuitCircuitTip = %s subcircuito
#
# circuit/RadixOption.java
#
radixAttr = Base
radix2 = Binário
radix10Signed = Decimal com sinal
radix10Unsigned = Decimal sem sinal
radix8 = Octal
radix16 = Hexadecimal
#
# circuit/SplitterClass.java
#
# splitter component name
splitterComponent = Divisor
# splitter end tool tips
splitterCombinedTip = Saídas combinadas do distribuidor
splitterSplit0Tip = Sem bits da saída combinada
splitterSplit1Tip = Bit %s da saída combinada
splitterSplitManyTip = Bits %s da saída combinada
# splitter attributes
splitterBitWidthAttr = Fan In
splitterFanOutAttr = Fan Out
splitterBitAttr = Bit %s
splitterBitNone = Vazio
#
# circuit/WireClass.java
#
wireComponent = Conexão
wireLengthAttr = Comprimento
wireDirectionAttr = Direção
wireDirectionHorzOption = Horizontal
wireDirectionVertOption = Vertical

# circuit/appear/AppearanceOrigin
circuitAnchor = Âncora
appearanceFacingAttr = Direção preferencial

# circuit/appear/AppearancePort
circuitPort = Porta