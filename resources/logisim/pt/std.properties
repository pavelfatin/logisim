#
# std/Builtin.java
#
builtinLibrary = Predefinida
# instance/StdAttr.java
stdFacingAttr = Direção
stdDataWidthAttr = Bits de dados
stdTriggerAttr = Gatilho
stdTriggerRising = Borda de subida
stdTriggerFalling = Borda de descida
stdTriggerHigh = Nível alto
stdTriggerLow = Nível baixo
stdLabelAttr = Rótulo
stdLabelFontAttr = Fonte do rótulo
# instance/InstanceTextField.java
changeLabelAction = Mudar rótulo
#
# std/base/Base.java
#
baseLibrary = Base

# std/base/BitExtender.java
extenderComponent = Extensor de bits
extenderInAttr = Bits à entrada
extenderOutAttr = Bit à saída
extenderTypeAttr = Tipo de extensão
extenderOneType = Um
extenderZeroType = Zero
extenderSignType = Sinal
extenderInputType = Entrada
extenderMainLabel = extensão
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = sinal
extenderInputLabel = entrada

# std/base/Clock
clockComponent = clock
clockHighAttr = duração em nível alto
clockLowAttr = duração em nível baixo
clockDurationValue = %s pulsos
clockDurationOneValue = 1 pulso
durationSmallMessage = Valor deve ser pelo menos %s.
durationLargeMessage = Valor deve ser %s ou menos.
freqInvalidMessage = Valor não é inteiro válido

# std/base/Pin
pinComponent = Pino
pinInputName = Entrada
pinOutputName = Saída
pinThreeStateAttr = Tri-state?
pinOutputAttr = Saída?
pinPullAttr = Comportamento
pinPullNoneOption = Inalterado
pinPullUpOption = Pull-up
pinPullDownOption = Pull-down
pinLabelLocAttr = Posição do rótulo
pinInputToolTip = Acrescentar um pino de entrada
pinOutputToolTip = Acrescentar um pino de saída
pinFrozenTitle = Pino associado ao supercircuito.
pinFrozenQuestion = O pino está associado ao estado do supercircuito. Criar um novo estado do circuito?

# std/base/Probe
probeComponent = Probe

# std/base/PullResistor
pullComponent = Resistor para estabilização
pullTypeAttr = Valor a estabilizar
pullZeroType = Zero
pullOneType = Um
pullErrorType = Erro

# std/base/Text.java
textComponent = Rótulo
textTextAttr = Texto
textFontAttr = Fonte
textHorzAlignAttr = Alinhamento horizontal
textHorzAlignLeftOpt = Esquerda
textHorzAlignRightOpt = Direita
textHorzAlignCenterOpt = Centro
textVertAlignAttr = Alinhamento vertical
textVertAlignTopOpt = Acima
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Abaixo
textVertAlignCenterOpt = Centro

# std/base/Tunnel.java
tunnelComponent = Túnel

#
# std/Gates.java
#
gatesLibrary = Portas
gateSizeAttr = Tamanho da porta
gateSizeNarrowOpt = Pequeno
gateSizeNormalOpt = Médio
gateSizeWideOpt = Grande
gateNegateAttr = Negar %s
gateInputsAttr = Número de entradas
xorBehaviorAttr = Comportamento de múltiplas entradas
xorBehaviorOne = Quando uma entrada estiver ligada
xorBehaviorOdd = Quando um número ímpar estiver à entrada
# std/Constant.java
constantComponent = Constante
constantValueAttr = Valor
# std/NotGate.java
notGateComponent = Porta NOT
# std/Buffer.java
bufferComponent = Buffer
# std/AndGate.java
andGateComponent = Porta AND
# std/NandGate.java
nandGateComponent = Porta NAND
# std/NorGate.java
norGateComponent = Porta NOR
# std/OrGate.java
orGateComponent = Porta OR
# std/XorGate.java
xorGateComponent = Porta XOR
# std/XnorGate.java
xnorGateComponent = Porta XNOR
# std/OddParityGate.java
oddParityComponent = Paridade ímpar
# std/EvenParityGate.java
evenParityComponent = Paridade par
# std/ControlledBuffer.java
controlledBufferComponent = Buffer controlado
controlledInverterComponent = Inversor controlado
controlledControlOption = Posição da linha de controle
controlledLeftHanded = À esquerda
controlledRightHanded = À direita
#
# std/Memory.java
#
memoryLibrary = Memória
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = Clock: atualização de estado ao gatilho
flipFlopQTip = Estado atual do flip-flop
flipFlopNotQTip = Complemento do estado atual do flip-flop
flipFlopResetTip = Limpar: quando 1, estado em 0 assincronamente
flipFlopPresetTip = Preset: quando 1, estado em 1 assincronamente
flipFlopEnableTip = Habilitar: quando 0, gatilhos do clock serão ineficazes
# std/Counter.java
counterComponent = Contador
counterMaxAttr   = Valor máximo
counterGoalAttr  = Em caso de overflow
counterGoalWrap  = Reiniciar
counterGoalStay  = Permanecer no valor
counterGoalContinue = Continuar contando
counterGoalLoad  = Carregar próximo valor
counterQTip      = Saída: valor atual do contador
counterClockTip  = Clock: valor pode ser atualizado ao disparo
counterDataTip   = Dados: valor a ser carregado no contador
counterLoadTip   = Carregar: quando 1, carregar dados de entrada (se Contar = 0) ou decrementar
counterEnableTip = Contar: se 1, incrementar contador (ou decrementar se Carregar = 1)
counterResetTip  = Clear: se 1, reiniciar em 0 assincronamente
counterCarryTip  = Carry: 1, se o valor alcançar o máximo (ou mínimo ao decrementar)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = Flip-Flop tipo D
# std/TFlipFlop.java
tFlipFlopComponent = Flip-Flop tipo T
# std/JKFlipFlop.java
jkFlipFlopComponent = Flip-Flop tipo JK
# std/SRFlipFlop.java
srFlipFlopComponent = Flip-Flop tipo SR
# std/Random.java
randomSeedAttr = Semente
randomComponent = Gerador aleatório
randomQTip = Saída: próximo número na sequência
randomClockTip = Clock: valor pode ser atualizado ao disparo
randomNextTip = Habilitar: passar ao próximo na sequência ao disparo do clock
randomResetTip = Limpar: se 1, reiniciar com a semente inicial assincronamente
# std/Register.java
registerComponent = Registrador
registerQTip = Saída: valor atual do registrador
registerDTip = Dados: valor armazenado ao disparo do clock
registerClkTip = Clock: valor pode ser atualizado ao disparo
registerClrTip = Limpar: se 1, valor para 0 assincronamente
registerEnableTip = Habilitar: se 0, gatilhos do clock serão ineficazes
registerLabel = reg
registerWidthLabel = (%sb)
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
romContentsAttr = Conteúdo
romContentsValue = (clicar para editar)
romChangeAction = Editar conteúdo da ROM
# std/Ram.java
ramAddrWidthAttr = Largura de bits de endereços
ramDataWidthAttr = Largura de bits de dados
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramGigabyteLabel = %sGB RAM
ramMegabyteLabel = %sMB RAM
ramKilobyteLabel = %sKB RAM
ramByteLabel = %sB RAM
romGigabyteLabel = %sGB ROM
romMegabyteLabel = %sMB ROM
romKilobyteLabel = %sKB ROM
romByteLabel = %sB ROM
memDataTip = Dados: valor carregado a partir do endereço
memAddrTip = Endereço: posição acessada na memória
memCSTip = Chip selecionado: 0 desabilita o componente
ramClkTip = Clock: valor na memória atualizado na transição de 0 para 1
ramOETip = Carregar: se 1, transferir da memória para saída
ramWETip = Armazenar: if 1, armazenar entrada na memória
ramClrTip = Limpar: conteúdos em 0 assincronamente
ramBusTip = Dados: valor transferido ou armazenado no endereço
ramInTip = Entrada: valor a ser armazenado no endereço
ramBusAttr = Interface de dados
ramBusSynchCombined = Porta síncrona para carga/armazenamento
ramBusAsynchCombined = Porta assíncrona para carga/armazenamento
ramBusSeparate = Separar portas para carga ou armazenamento
ramEditMenuItem = Editar conteúdos...
ramClearMenuItem = Limpar conteúdos
ramLoadMenuItem = Carregar imagem...
ramSaveMenuItem = Salvar imagem...
ramConfirmClearTitle = Confirmar apagamento
ramConfirmClearMsg = Confirmar atribuição de zeros à memória?
ramLoadDialogTitle = Carregar imagem da RAM
ramLoadErrorTitle = Erro ao carregar
ramSaveDialogTitle = Salvar imagem da RAM
ramSaveErrorTitle = Erro ao salvar
# std/memory/ShiftRegister.java
shiftRegisterComponent = Registrador de deslocamento
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Número de estágios
shiftRegParallelAttr = Carga em paralelo
shiftRegShiftTip = Shift: deslocamento desabilitado se 0
shiftRegClockTip = Clock: valores poderão ser atualizado ao gatilho do clock
shiftRegClearTip = Limpar: se 1, reiniciar todos em 0 assincronamente
shiftRegInTip    = Entrada: valor a ser deslocado no primeiro estágio
shiftRegOutTip   = Saída: será o conteúdo do último estágio
shiftRegLoadTip  = Carregar: se 1 (com shift = 0), todos os estágios serão carregados a partir das entradas
#
# std/Plexers.java
#
plexerLibrary = Plexers
plexerSelectBitsAttr = Bits de seleção
plexerThreeStateAttr = Tri-state?
# std/Multiplexer.java
multiplexerComponent = Multiplexador
multiplexerSelectTip = Select: identificar que entradas se tornarão saídas
multiplexerInTip = Entrada %s
multiplexerOutTip = Saída
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexador
demultiplexerSelectTip = Selecionar: identificar que saída receberá a entrada
demultiplexerInTip = Entrada
demultiplexerOutTip = Saída %s
# std/Decoder.java
decoderComponent = Decodificador
decoderSelectTip = Selecionar: identificar que saída irá para 1
decoderOutTip = Saída %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Codificador de prioridade
priorityEncoderInTip = Entrada %s
priorityEncoderOutTip = Saída: posição do bit mais significativo à entrada
priorityEncoderEnableInTip = Habilitar entrada: desabilitar o componente com 0
priorityEncoderEnableOutTip = Habilitar saída: 1 se habilitado e sem entradas em 1
priorityEncoderGroupSignalTip = Selecionar grupo: 1 se habilitado e qualquer entrada em 1
# std/BitSelector.java
bitSelectorComponent = Seletor de bits
bitSelectorGroupAttr = Bits de saída
bitSelectorOutputTip = Saída: valor do grupo de bits selecionado a partir dos dados
bitSelectorDataTip = Dados
bitSelectorSelectTip = Selecionar: identificar que grupos de dados serão selecionados
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritmética
# arith/Adder.java
adderComponent = Somador
adderInputTip = Entrada: operando a ser somado
adderOutputTip = Saída: soma das entradas (mais "carry-in" à entrada)
adderCarryInTip = Carry-in: se 1, adicionará uma unidade à saída
adderCarryOutTip = Carry-out: 1 se o resultado não couber nos bits disponíveis
# arith/Subtractor.java
subtractorComponent = Subtrator
subtractorMinuendTip = Minuendo: número do qual se irá subtrair
subtractorSubtrahendTip = Subtraendo: número a ser subtraído do minuendo
subtractorOutputTip = Saída: diferença entre minuendo e subtraendo
subtractorBorrowInTip = Borrow-in: se 1, uma unidade será retirada da saída
subtractorBorrowOutTip = Borrow-out: 1 se a diferença levar a um valor negativo
# arith/Multiplier.java
multiplierComponent = Multiplicador
multiplierInputTip = Entrada: operando a ser multiplicado
multiplierOutputTip = Saída: produto das entradas, mais "carry in"
multiplierCarryInTip = Carry-in: valor a ser adicionado à saída
multiplierCarryOutTip = Carry-out: bits mais significativos do produto
# arith/Divider.java
dividerComponent = Divisor
dividerUpperInput = superior
dividerRemainderOutput = resto
dividerDividendLowerTip = Dividendo inferior: parte inferior do número a ser dividido
dividerDividendUpperTip = Dividend Upper: parte superior do número a ser dividido
dividerDivisorTip = Divisor: número a ser usado para dividir
dividerOutputTip = Saída: quociente da divisão
dividerRemainderTip = Resto: resto inteiro da divisão (dividendo - quociente * divisor)
# arith/Negator.java
negatorComponent = Negador
negatorInputTip = Entrada: número a ser negado
negatorOutputTip = Saída: complemento de dois da entrada
# arith/Comparator.java
comparatorComponent = Comparador
comparatorType = Tipo numérico
unsignedOption = Sem sinal
twosComplementOption = Complemento de dois
comparatorInputATip = A: números que precedem a operação de comparação
comparatorInputBTip = B: números que sucedem a operação de comparação
comparatorLessTip = Menor: 1, se A < B
comparatorEqualTip = Igual: 1, se A = B
comparatorGreaterTip = Maior: 1, se A > B
# arith/Shifter.java
shifterComponent = Registrador para deslocamento
shifterShiftAttr = Tipo de deslocamento
shiftLogicalLeft = Lógico à esquerda
shiftLogicalRight = Lógico à direita
shiftArithmeticRight = Aritmético à direita
shiftRollLeft = Circular à esquerda
shiftRollRight = Circular à direita
shifterDistanceTip = Distância: até onde deslocar a entrada
shifterInputTip = Entrada: bits a serem deslocados
shifterOutputTip = Saída: resultado com os bits da entrada deslocados
# arith/BitAdder.java
bitAdderComponent = Contador de bits
bitAdderInputTip = Entrada: bits a serem contados
bitAdderOutputManyTip = Saída: quantidade de bits em 1 nas entradas
bitAdderOutputOneTip = Saída: quantidade de bits em 1 na entrada
# arith/BitFinder.java
bitFinderComponent = Indexador de bit
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderLowLabel = low
bitFinderHighOption = MSB %s
bitFinderLowOption = LSB %s
bitFinderTypeAttr = Tipo
bitFinderIndexHighTip = Índice: posição do MSB à entrada %s
bitFinderIndexLowTip = Índice: posição do LSB à entrada %s
bitFinderPresentTip = Presente: 1, se entrada contiver %s
bitFinderInputTip = Entrada: bits a serem procurados
#
# io
#
# io/Io.java
ioLibrary = Entrada/Saída
ioLabelCenter = Centro
ioBitWidthAttr = Largura em bits
ioColorAttr = Cor
ioLabelLocAttr = Posição do rótulo
ioLabelColorAttr = Cor do rótulo
ioActiveAttr = Ativar em 1?
# io/Button.java
buttonComponent = Botão
# io/Joystick.java
joystickComponent = Joystick
# io/Keyboard.java
keyboardComponent = Teclado
keybDesc = teclado (buffer cap. %s)
keybBufferLengthAttr = Tamanho do buffer
keybClearTip = Limpar: se 1, limpar o buffer
keybClockTip = Clock: ao gatilho, consumir o primeiro caractere do buffer
keybEnableTip = Leitura habilitada: se 0, desabilita o clock
keybAvailTip = Disponível: 1 quando o buffer contiver caracteres
keybOutputTip = Dados: valor ASCII do caractere à frente do buffer
# io/Led.java
ledComponent = LED
# io/SevenSegment.java
sevenSegmentComponent = Display de 7-segmentos
# io/HexDigit.java
hexDigitComponent = Display hexadecimal
# io/DotMatrix.java
dotMatrixComponent = Matriz de LEDs
ioMatrixInput = Formato da entrada
ioMatrixRows = Linhas da matriz
ioMatrixCols = Colunas da matriz
ioOnColor = Cor se ligado
ioOffColor = Cor se desligado
ioBackgroundColor = Cor de fundo
ioMatrixPersistenceAttr = Persistência
ioMatrixShape = Pontilhado
ioInputColumn = Colunas
ioInputRow = Linhas
ioInputSelect = Selecionar linhas/colunas
ioShapeCircle = Circular
ioShapeSquare = Quadrado
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s linhas, %s colunas)
ttyDescShort = TTY
ttyRowsAttr = Linhas
ttyColsAttr = Colunas
ttyClearTip = Limpar: se 1, limpar a tela
ttyClockTip = Clock: ao gatilho do clock incluir caractere à entrada
ttyEnableTip = Habilitar escrita: se 0, desabilitar o clock
ttyInputTip = Dados: valor ASCII do próximo caractere a escrever
