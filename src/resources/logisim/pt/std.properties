#
# std/Builtin.java
#
builtinLibrary= Predefinido
# instance/StdAttr.java
stdFacingAttr= Posi\u00e7\u00e3o
stdDataWidthAttr= Bits de dados
stdTriggerAttr= Gatilho
stdTriggerRising= Borda de subida
stdTriggerFalling= Borda de descida
stdTriggerHigh= N\u00edvel alto
stdTriggerLow= N\u00edvel baixo
stdLabelAttr= R\u00f3tulo
stdLabelFontAttr= Fonte do r\u00f3tulo
# instance/InstanceTextField.java
changeLabelAction= Substituir r\u00f3tulo
#
# std/base/Base.java
#
baseLibrary= Base

# std/base/BitExtender.java
extenderComponent= Extensor de bits
extenderInAttr= Largura em bits \u00e0 entrada
extenderOutAttr= Largura em bits \u00e0 sa\u00edda
extenderTypeAttr= Tipo da extens\u00e3o
extenderOneType= Um
extenderZeroType= Zero
extenderSignType= Sinal
extenderInputType= Entrada
extenderMainLabel= extens\u00e3o
extenderOneLabel= 1
extenderZeroLabel= 0
extenderSignLabel= sinal
extenderInputLabel= entrada

# std/base/Clock
clockComponent= Clock
clockHighAttr= Dura\u00e7\u00e3o em n\u00edvel alto
clockLowAttr= Dura\u00e7\u00e3o em n\u00edvel baixo
clockDurationValue= %s pulsos
clockDurationOneValue= 1 pulso
durationSmallMessage= Valor deve ser ao menos %s.
durationLargeMessage= Valor deve ser %s ou menor.
freqInvalidMessage= Valor n\u00e3o \u00e9 um inteiro v\u00e1lido

# std/base/Pin
pinComponent= Pino
pinInputName= Entrada
pinOutputName= Sa\u00edda
pinThreeStateAttr= Tri-state?
pinOutputAttr= Sa\u00edda?
pinPullAttr= Comportamento para ajuste
pinPullNoneOption= Sem altera\u00e7\u00f5es
pinPullUpOption= Ajustar para cima
pinPullDownOption= Ajustar para baixo
pinLabelLocAttr= Posi\u00e7\u00e3o do r\u00f3tulo
pinInputToolTip= Acrescentar um pino de entrada
pinOutputToolTip= Acrescentar um pino de sa\u00edda
pinFrozenTitle= Pino associado ao supercircuito.
pinFrozenQuestion= Pino vinculado ao estado do supercircuito. Criar um novo estado do circuito?

# std/base/Probe
probeComponent= Ponta de prova

# std/base/PullResistor
pullComponent= Resistor para ajuste
pullTypeAttr= Dire\u00e7\u00e3o para ajuste
pullZeroType= Zero
pullOneType= Um
pullErrorType= Erro

# std/base/Text.java
textComponent= R\u00f3tulo
textTextAttr= Texto
textFontAttr= Fonte
textHorzAlignAttr= Alinhamento horizontal
textHorzAlignLeftOpt= Esquerda
textHorzAlignRightOpt= Direita
textHorzAlignCenterOpt= Centro
textVertAlignAttr= Alinhamento vertical
textVertAlignTopOpt= Em cima
textVertAlignBaseOpt= Base
textVertAlignBottomOpt= Embaixo
textVertAlignCenterOpt= Centro

# std/base/Tunnel.java
tunnelComponent= T\u00fanel

#
# std/Gates.java
#
gatesLibrary= Portas
gateSizeAttr= Tamanho da porta
gateSizeNarrowOpt= Pequeno
gateSizeNormalOpt= M\u00e9dio
gateSizeWideOpt= Grande
gateNegateAttr= Negar %s
gateInputsAttr= Quantidade de entradas
xorBehaviorAttr= Comportamento para m\u00faltiplas entradas
xorBehaviorOne= Quando uma entrada estiver em 1
xorBehaviorOdd= Quando existir um n\u00famero \u00edmpar
# std/Constant.java
constantComponent= Constante
constantValueAttr= Valor
# std/NotGate.java
notGateComponent= Porta NOT
# std/Buffer.java
bufferComponent= Buffer
# std/AndGate.java
andGateComponent= Porta AND
# std/NandGate.java
nandGateComponent= Porta NAND
# std/NorGate.java
norGateComponent= Porta NOR
# std/OrGate.java
orGateComponent= Porta OR
# std/XorGate.java
xorGateComponent= Porta XOR
# std/XnorGate.java
xnorGateComponent= Porta XNOR
# std/OddParityGate.java
oddParityComponent= Paridade \u00edmpar
# std/EvenParityGate.java
evenParityComponent= Paridade par
# std/ControlledBuffer.java
controlledBufferComponent= Buffer controlado
controlledInverterComponent= Inversor controlado
controlledControlOption= Posi\u00e7\u00e3o da linha de controle
controlledLeftHanded= \u00c0 esquerda
controlledRightHanded= \u00c0 direita
#
# std/Memory.java
#
memoryLibrary= Mem\u00f3ria
memEnableLabel= en
# AbstractFlipFlop.java
flipFlopClockTip= Clock: atualizar estado ao gatilho
flipFlopQTip= Estado atual do flip-flop
flipFlopNotQTip= Complemento do estado atual do flip-flop
flipFlopResetTip= Clear: quando em 1, o estado do pino ser\u00e1 0 assincronamente
flipFlopPresetTip= Preset: quando em 1, o estado do pino ser\u00e1 1 assincronamente
flipFlopEnableTip= Enable: quando em 0, os gatilhos de clock n\u00e3o ser\u00e3o efetivos
# std/Counter.java
counterComponent= Contador
counterMaxAttr= Valor m\u00e1ximo
counterGoalAttr= A\u00e7\u00e3o quando houver transbordamento
counterGoalWrap= Reiniciar contagem
counterGoalStay= Permanecer no valor
counterGoalContinue= Continuar contando
counterGoalLoad= Carregar pr\u00f3ximo valor
counterQTip= Sa\u00edda: valor atual do contador
counterClockTip= Clock: valor pode ser atualizado ao gatilho
counterDataTip= Dados: valor a ser carregado no contador
counterLoadTip= Load: quando em 1, carregar a partir dos dados de entrada (se Count = 0) ou decrementar
counterEnableTip= Count: quando em 1, incrementar contador (ou decrementar se Load = 1)
counterResetTip= Clear: quando em 1, reiniciar em 0 assincronamente
counterCarryTip= Carry: ser\u00e1 1 quando o valor m\u00e1ximo for alcan\u00e7ado (ou m\u00ednimo se em decremento)
counterEnableLabel= ct
counterLabel= ctr
# std/DFlipFlop.java
dFlipFlopComponent= Flip-Flop tipo D
# std/TFlipFlop.java
tFlipFlopComponent= Flip-Flop tipo T
# std/JKFlipFlop.java
jkFlipFlopComponent= Flip-Flop tipo JK
# std/SRFlipFlop.java
srFlipFlopComponent= Flip-Flop tipo SR
# std/Random.java
randomSeedAttr= Semente
randomComponent= Gerador de valor aleat\u00f3rio
randomQTip= Sa\u00edda: pr\u00f3ximo n\u00famero na sequ\u00eancia
randomClockTip= Clock: valor pode ser atualizado ao gatilho
randomNextTip= Enable: passos at\u00e9 o pr\u00f3ximo na sequ\u00eancia ao gatilho do clock
randomResetTip= Clear: quando em 1, reiniciar com a semente inicial assincronamente
# std/Register.java
registerComponent= Registrador
registerQTip= Sa\u00edda: valor corrente do registrador
registerDTip= Data: valor armazenado ao gatilho do clock
registerClkTip= Clock: valor atualizado ao gatilho 
registerClrTip= Clear: quanto em 1, o valor do pino ser\u00e1 0 assincronamente
registerEnableTip= Enable: quando em 0, os gatilhos de clock n\u00e3o ser\u00e3o efetivos
registerLabel= reg
registerWidthLabel= (%sb)
# std/RamFactory.java
ramComponent= RAM
# std/RomFactory.java
romComponent= ROM
romContentsAttr= Conte\u00fados
romContentsValue= (clicar para editar)
romChangeAction= Editar conte\u00fados da ROM
# std/Ram.java
ramAddrWidthAttr= Largura em bits do endere\u00e7o
ramDataWidthAttr= Largura em bits dos dados
ramDataLabel= D
ramAddrLabel= A
ramWELabel= str
ramCSLabel= sel
ramOELabel= ld
ramClrLabel= clr
ramGigabyteLabel= %sGB RAM
ramMegabyteLabel= %sMB RAM
ramKilobyteLabel= %sKB RAM
ramByteLabel= %sB RAM
romGigabyteLabel= %sGB ROM
romMegabyteLabel= %sMB ROM
romKilobyteLabel= %sKB ROM
romByteLabel= %sB ROM
memDataTip= Data: valor carregado a partir do endere\u00e7o
memAddrTip= Address: posi\u00e7\u00e3o acessada na mem\u00f3ria
memCSTip= Chip select: 0 desabilita componente
ramClkTip= Clock: valor da mem\u00f3ria ser\u00e1 atualizado na varia\u00e7\u00e3o de 0 para 1 
ramOETip= Load: se 1, carregar mem\u00f3ria \u00e0 sa\u00edda
ramWETip= Store: se 1, armazenar entrada na mem\u00f3ria
ramClrTip= Clear: conte\u00fados dos pinos em 1 ir\u00e3o para 0 assincronamente
ramBusTip= Data: valor carregado ou armazenado no endere\u00e7o
ramInTip= Entrada: valor a ser armazenado no endere\u00e7o
ramBusAttr= Interface de dados
ramBusSynchCombined= Porta para carga/armazenamento s\u00edncrono
ramBusAsynchCombined= Porta para carga/armazenamento ass\u00edncrono
ramBusSeparate= Portas para carga e armazenamento separados
ramEditMenuItem= Editar conte\u00fados...
ramClearMenuItem= Limpar conte\u00fados
ramLoadMenuItem= Carregar imagem...
ramSaveMenuItem= Salvar imagem...
ramConfirmClearTitle= Confirmar apagamento
ramConfirmClearMsg= Tem certeza que quer zerar toda a mem\u00f3ria
ramLoadDialogTitle= Carregar imagem da RAM
ramLoadErrorTitle= Carregar erro
ramSaveDialogTitle= Salvar imagem da RAM
ramSaveErrorTitle= Erro ao salvar
# std/memory/ShiftRegister.java
shiftRegisterComponent= Registrador de deslocamento
shiftRegisterLabel1= shift reg
shiftRegisterLabel2= %sx%s
shiftRegLengthAttr= N\u00famero de est\u00e1gios
shiftRegParallelAttr= Carga em paralelo
shiftRegShiftTip= Shift: desabilitar se 0
shiftRegClockTip= Clock: valores poder\u00e3o ser atualizados ao gatilho
shiftRegClearTip= Clear: quando em 1, reiniciar todos os valores em 0 assincronamente
shiftRegInTip= Entrada: valor a ser deslocado no primeiro est\u00e1gio
shiftRegOutTip= Sa\u00edda: conte\u00fado do \u00faltimo est\u00e1gio
shiftRegLoadTip= Load: quando em 1 (com shift = 0), todos os est\u00e1gios ser\u00e3o carregados a partir das entradas
#
# std/Plexers.java
#
plexerLibrary= Plexers
plexerSelectBitsAttr= Bits para sele\u00e7\u00e3o
plexerThreeStateAttr= Tri-state?
plexerDisabledAttr= Disabled Output
plexerDisabledFloating= Floating
plexerDisabledZero= Zero
# std/Multiplexer.java
multiplexerComponent= Multiplexador
multiplexerSelectTip= Select: identificar qual entrada se tornar\u00e1 sa\u00edda
multiplexerEnableTip= Enable: when not 0, output is selected input
multiplexerInTip= Entrada %s
multiplexerOutTip= Sa\u00edda
# std/Demultiplexer.java
demultiplexerComponent= Demultiplexador
demultiplexerSelectTip= Select: identificar qual sa\u00edda receber\u00e1 a entrada
demultiplexerEnableTip= Enable: when not 0, selected output is input
demultiplexerInTip= Entrada
demultiplexerOutTip= Sa\u00edda %s
# std/Decoder.java
decoderComponent= Decodificador
decoderSelectTip= Select: identificar qual sa\u00edda ser\u00e1 igual a 1
decoderEnableTip= Enable: when not 0, selected output is 1
decoderOutTip= Sa\u00edda %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent= Codificador de prioridade
priorityEncoderInTip= Entrada %s
priorityEncoderOutTip= Output: endere\u00e7o do valor 1 mais significativo na entrada
priorityEncoderEnableInTip= Enable Input: 0 ir\u00e1 desabilitar o componente
priorityEncoderEnableOutTip= Enable Output: 1 se habilitado e nenhuma entrada estiver em 1
priorityEncoderGroupSignalTip= Group Select: 1 se habilitado e alguma entrada estiver em 1
# std/BitSelector.java
bitSelectorComponent= Selector de bit
bitSelectorGroupAttr= Bits de sa\u00edda
bitSelectorOutputTip= Sa\u00edda: valor do grupo de bits selecionados a partir dos dados
bitSelectorDataTip= Dados
bitSelectorSelectTip= Select: identificar qual grupo de dados da entrada ser\u00e1 selecionado
#
# arith/Arithmetic.java
#
arithmeticLibrary= Aritm\u00e9tica
# arith/Adder.java
adderComponent= Somador
adderInputTip= Entrada: um dos n\u00fameros a ser adicionado
adderOutputTip= Sa\u00edda: a soma das entradas (mais "carry in")
adderCarryInTip= Carry In: se 1, um valor adicional em 1 ser\u00e1 adicionado \u00e0 sa\u00edda
adderCarryOutTip= Carry Out: 1 se a soma transbordar para os bits dispon\u00edveis
# arith/Subtractor.java
subtractorComponent= Subtrator
subtractorMinuendTip= Minuendo: n\u00famero do qual outra ser\u00e1 subtra\u00eddo
subtractorSubtrahendTip= Subtraendo: n\u00famero a subtrair do minuendo
subtractorOutputTip= Sa\u00edda: a diferen\u00e7a entre o minuendo e o subtraendo
subtractorBorrowInTip= Borrow In: se 1, 1 ser\u00e1 deduzido da sa\u00edda
subtractorBorrowOutTip= Borrow Out: 1 se a diferen\u00e7a levar a um valor negativo
# arith/Multiplier.java
multiplierComponent= Multiplicador
multiplierInputTip= Entrada: um dos n\u00fameros a ser multiplicado
multiplierOutputTip= Sa\u00edda: o produto das entradas, mais o "carry in"
multiplierCarryInTip= Carry In: valor a ser adicionado \u00e0 sa\u00edda
multiplierCarryOutTip= Carry Out: bits mais significativos do produto
# arith/Divider.java
dividerComponent= Divisor
dividerUpperInput= upper
dividerRemainderOutput= rem
dividerDividendLowerTip= Parte baixa do dividendo: metade baixa do n\u00famero a ser dividido
dividerDividendUpperTip= Parte alta do dividendo: metade alta do n\u00famero a ser dividido
dividerDivisorTip= Divisor: n\u00famero pelo qual ser\u00e1 dividido
dividerOutputTip= Sa\u00edda: o resultado da divis\u00e3o do dividendo pelo divisor
dividerRemainderTip= Resto: o resto da divis\u00e3o (dividendo - output * divisor)
# arith/Negator.java
negatorComponent= Negador
negatorInputTip= Entrada: n\u00famero a ser negado
negatorOutputTip= Sa\u00edda: complemento de dois da entrada
# arith/Comparator.java
comparatorComponent= Comparador
comparatorType= Tipo num\u00e9rico
unsignedOption= Sem sinal
twosComplementOption= Complemento de 2
comparatorInputATip= A: n\u00famero precedendo a opera\u00e7\u00e3o de compara\u00e7\u00e3o
comparatorInputBTip= B: n\u00famero seguindo a opera\u00e7\u00e3o de compara\u00e7\u00e3o
comparatorLessTip= Less: 1 se A for menor que B
comparatorEqualTip= Equal: 1 se A igual a B
comparatorGreaterTip= Greater: 1 se A for maior que B
# arith/Shifter.java
shifterComponent= Deslocador
shifterShiftAttr= Tipo do deslocamento
shiftLogicalLeft= L\u00f3gico para a esquerda
shiftLogicalRight= L\u00f3gico para a direita
shiftArithmeticRight= Aritm\u00e9tico para a direita
shiftRollLeft= Com rota\u00e7\u00e3o \u00e0 esquerda
shiftRollRight= Com rota\u00e7\u00e3o \u00e0 direita
shifterDistanceTip= Distance: at\u00e9 onde deslocar a entrada
shifterInputTip= Entrada: bits a serem deslocados
shifterOutputTip= Sa\u00edda: resultado do deslocamento da entrada
# arith/BitAdder.java
bitAdderComponent= Contador de bits
bitAdderInputTip= Entrada: bits a serem contados
bitAdderOutputManyTip= Sa\u00edda: n\u00famero de bits iguais a 1 nas entradas
bitAdderOutputOneTip= Sa\u00edda: n\u00famero de bits iguais a 1 na entrada
# arith/BitFinder.java
bitFinderComponent= Indexador de bits
bitFinderFindLabel= find
bitFinderHighLabel= alto
bitFinderLowLabel= baixo
bitFinderHighOption= Mais alta ordem %s
bitFinderLowOption= Mais baixa ordem %s
bitFinderTypeAttr= Tipo
bitFinderIndexHighTip= Index: \u00edndice da mais alta ordem da entrada %s
bitFinderIndexLowTip= Index: \u00edndice da mais baixa ordem da entrada %s
bitFinderPresentTip= Present: 1 se a entrada contiver um %s
bitFinderInputTip= Entrada: bits a serem procurados
#
# io
#
# io/Io.java
ioLibrary= Entrada/Sa\u00edda
ioLabelCenter= Centro
ioBitWidthAttr= Largura em bits
ioColorAttr= Cor
ioLabelLocAttr= Posi\u00e7\u00e3o do r\u00f3tulo
ioLabelColorAttr= Cor do r\u00f3tulo
ioActiveAttr= Ativar em alto?
# io/Button.java
buttonComponent= Bot\u00e3o
# io/Joystick.java
joystickComponent= Joystick
# io/Keyboard.java
keyboardComponent= Teclado
keybDesc= teclado (buffer cap. %s)
keybBufferLengthAttr= Tamanho do buffer
keybClearTip= Clear: 1 ir\u00e1 limpar o buffer
keybClockTip= Clock: ao gatilho ir\u00e1 consumir o primeiro caractere no buffer
keybEnableTip= Read enable: 0 ir\u00e1 desabilitar o clock
keybAvailTip= Available: 1 quando o buffer contiver caracteres
keybOutputTip= Data: valor ASCII do primeiro caractere no buffer
# io/Led.java
ledComponent= LED
# io/SevenSegment.java
sevenSegmentComponent= Display de 7-segmentos
# io/HexDigit.java
hexDigitComponent= Display hexadecimal
# io/DotMatrix.java
dotMatrixComponent= Matriz de LED
ioMatrixInput= Formato da entrada
ioMatrixRows= Linhas da matriz
ioMatrixCols= Colunas da matriz
ioOnColor= Cor se ligado
ioOffColor= Cor se desligado
ioBackgroundColor= Fundo
ioMatrixPersistenceAttr= Persist\u00eancia
ioMatrixShape= Forma dos pontos
ioInputColumn= Colunas
ioInputRow= Linhas
ioInputSelect= Selecionar linhas/colunas
ioShapeCircle= Circular
ioShapeSquare= Quadrado
# io/Tty.java
ttyComponent= TTY
ttyDesc= TTY (%s linhas, %s colunas)
ttyDescShort= TTY
ttyRowsAttr= Linhas
ttyColsAttr= Colunas
ttyClearTip= Clear: 1 ir\u00e1 limpar a tela
ttyClockTip= Clock: ao gatilho ir\u00e1 acrescentar caractere \u00e0 entrada
ttyEnableTip= Write enable: 0 ir\u00e1 desabilitar o clock
ttyInputTip= Data: valor ASCII do pr\u00f3ximo caractere a ser escrito
